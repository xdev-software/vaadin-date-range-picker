name: Automated Master TEST CI

on:
  workflow_dispatch:
  push:
    branches: [ automated-master ]

jobs:
  prepare_release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Configure Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
      
    - name: Un-SNAP root
      run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
    
    - name: Un-SNAP demo
      run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
      working-directory: vaadin-date-range-picker-demo
  
    - name: Un-SNAP 
      run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
      working-directory: vaadin-date-range-picker
  
    - name: Get version
      id: version
      run: |
       echo "::set-output name=release::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
      working-directory: vaadin-date-range-picker
  
    - name: Commit and Push
      run: |
        git add -A
        git commit -m "Release ${{ steps.version.outputs.release }}"
        git push origin
        git tag v${{ steps.version.outputs.release }}
        git push origin --tags
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.release }}
        release_name: v${{ steps.version.outputs.release }}
        body: |
          ## Installation
          Add the following lines to your pom:
          ```XML
          <dependency>
             <groupId>com.xdev-software</groupId>
             <artifactId>vaadin-date-range-picker</artifactId>
             <version>${{ steps.version.outputs.release }}</version>
          </dependency>
          ```
        draft: true
        prerelease: false

    - name: Save Release Asset Upload URL to File
      shell: bash
      run: |
        echo '${{ steps.create_release.outputs.upload_url }}' > release_asset_upload_url.txt

    - name: Upload Release Asset Upload URL
      uses: actions/upload-artifact@v2
      with:
        name: release_asset_upload_url
        path: release_asset_upload_url.txt

  publish_central:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8 Apache Maven Central
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 1.8
        server-id: ossrh
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}

#    - name: Publish to Apache Maven Central
#      run: mvn deploy -Possrh
#      env:
#        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
#        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
#        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
#      working-directory: vaadin-date-range-picker
  
  build_directory:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
      
    - name: Build for Vaadin Directory
      run: mvn install -Pdirectory
      working-directory: vaadin-date-range-picker
      
    - name: Upload asset
      uses: actions/upload-artifact@v2
      with:
        name: vaadin-directory-files
        path: vaadin-date-range-picker/target/vaadin-date-range-picker-*.zip
        if-no-files-found: error

    - name: Download Release Asset Upload URL
      uses: actions/download-artifact@v1
      with:
        name: release_asset_upload_url
        path: temp_artf/release_asset_upload_url

    - name: Fake steps.create_release.outputs.upload_url from predecessor
      id: create_release
      run: echo "::set-output name=upload_url::$(cat temp_artf/release_asset_upload_url/release_asset_upload_url.txt)"

    - name: Get version
      id: version
      run: |
       echo "::set-output name=release::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
      working-directory: vaadin-date-range-picker

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: vaadin-date-range-picker/target/vaadin-date-range-picker-${{ steps.version.outputs.release }}.zip
        asset_name: vaadin-date-range-picker-${{ steps.version.outputs.release }}.zip
        asset_content_type: application/zip

  after_release:
    runs-on: ubuntu-latest
    needs: [publish_central, build_directory]
    steps:
    - uses: actions/checkout@v2
      
    - name: Configure Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        
    - name: Inc Version and SNAP root
      run: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} -DgenerateBackupPoms=false -DnextSnapshot=true
    
    - name: Inc Version and SNAP demo
      run: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} -DgenerateBackupPoms=false -DnextSnapshot=true
      working-directory: vaadin-date-range-picker-demo
  
    - name: Inc Version and SNAP 
      run: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} -DgenerateBackupPoms=false -DnextSnapshot=true
      working-directory: vaadin-date-range-picker

    - name: Commit and Push
      run: |
        git add -A
        git commit -m "Release ${{ steps.version.outputs.release }}"
        git push origin
    
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        destination_branch: "develop"
        pr_title: "Sync back"
        pr_body: "An automated PR to sync changes back"

